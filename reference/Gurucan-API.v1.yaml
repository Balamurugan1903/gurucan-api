openapi: 3.0.0
info:
  title: Gurucan API
  version: '1.0'
  contact:
    name: Dmitrii
    email: dmitrii@gurucan.com
    url: gurucan.com
  description: |-
    https://github.com/jdponomarev/gurucan-api
    help.gurucan.com
servers:
  - url: 'https://{domain}.gurucan.com/api/'
    description: "Your school's endpoint"
  - url: 'https://app.gurucan.com/api/'
    description: Login endpoint
paths:
  /admin/login:
    post:
      summary: Login to admin panel
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - ok
                  me:
                    $ref: ../models/User.v1.yaml
                  jwt_token:
                    type: string
              examples:
                example-1: {}
          headers: {}
      operationId: post-admin-login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: admin email
                password:
                  type: string
                  description: |
                    Admin password
                domain:
                  type: string
                  description: You school domain
              required:
                - email
                - password
                - domain
      description: Log administrator in
    parameters: []
  /admin/reports:
    get:
      summary: Get reports
      tags: []
      responses: {}
      operationId: get-admin-reports
      description: Get reports
  /admin/payments:
    get:
      summary: Get payments
      tags: []
      responses: {}
      operationId: get-admin-payments
      description: Get all payyments
  /admin/users:
    post:
      summary: Create user
      operationId: post-admin-users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - ok
                  user:
                    $ref: ../models/User.v1.yaml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: user email
                role:
                  type: string
                  description: 'User role. Default role is "user"'
                  enum:
                    - user
                    - curator
                    - owner
                    - editor
                password:
                  type: string
                  description: "User password. Is automatically generated if it's not passed."
              required:
                - email
            examples:
              example:
                value:
                  email: test@test.com
        description: ''
      description: Creates a user. If email is set in admin panel â€“ new user get an email on creation.
    get:
      summary: Get users
      operationId: get-admin-users
      responses:
        '200':
          description: OK
      description: "Get your school's users"
      requestBody:
        content:
          application/xml:
            schema:
              type: object
              properties: {}
        description: ''
      parameters:
        - schema:
            type: number
          in: query
          name: page
          description: Each page is 20 items long
        - schema:
            type: string
          in: query
          name: search
          description: |
            Search query
        - schema:
            type: string
          in: query
          name: filters
          description: |
            Not documented yet
  '/admin/users/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Get user
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - ok
                  user:
                    $ref: ../models/User.v1.yaml
      operationId: get-admin-users-id
      description: Get a single user by ID
    post:
      summary: Edit user
      operationId: post-admin-users-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - ok
      description: Edit user
      requestBody:
        content:
          application/json:
            schema:
              $ref: ''
  '/admin/messages/{id}/delete':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    post:
      summary: Delete a message
      operationId: post-admin-messages-id-delete
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - ok
      description: Delete a chat message
      requestBody: {}
  '/admin/users/{user_id}/grant-access':
    parameters:
      - schema:
          type: string
        name: user_id
        in: path
        required: true
    post:
      summary: Grant access
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - ok
                  updateStatus:
                    type: string
      operationId: post-admin-users-user_id-grant-access
      description: 'Grant user access to particular courses/bundles, or othe purchaseable items.'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                item:
                  type:
                    - string
                    - object
                  required:
                    - module
                    - refPath
                    - _id
                  properties:
                    module:
                      type: string
                      description: 'course, chat, bundle or plan'
                      enum:
                        - course
                        - chat
                        - bundle
                        - plan
                    refPath:
                      type: string
                      description: 'Course, Chat, Bundle or Plan'
                      enum:
                        - Course
                        - Chat
                        - Bundle
                        - Plan
                    _id:
                      type: string
                      description: "Item that you'd like to give access to \"_id\""
                    meta:
                      type: object
                      description: |
                        Reserved for later
                sendPaymentEmail:
                  type: boolean
                  default: false
                  description: Whether send the payment email attached to thtis item or not. By deafult is false
              required:
                - item
        description: ''
  '/admin/emails/{email_id}/broadcast':
    parameters:
      - schema:
          type: string
        name: email_id
        in: path
        required: true
    post:
      summary: Broadcast an email
      tags: []
      responses: {}
      operationId: post-admin-emails-email_id-broadcast
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Use this to send a test email to a single address
                queries:
                  type: string
                  description: Not documented yet
        description: "Please don't use it without \"email\" param until this is documented fully"
  '/chats/{chat_id}':
    parameters:
      - schema:
          type: string
        name: chat_id
        in: path
        required: true
    post:
      summary: Post a message to a chat
      tags: []
      responses: {}
      operationId: post-chats-chat_id
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                attachments:
                  type: array
                  items:
                    type: object
components:
  schemas: {}
  securitySchemes:
    jwt_token:
      name: jwt_token
      type: apiKey
      in: header
      description: "You'll get this token after login"
    gc-api-key:
      name: gc-api-key
      type: apiKey
      in: header
      description: Use gc_api_key as a body param. You can get your API key from the admin panel.
